classDeclar = _class identifier "{" {memberDeclar} "}";
memberDeclar = classVarDeclar | subroutineDeclar;
classVarDeclar = (_static | _field ) type identifier {"," identifier}";";
type = _int | _char | _boolean | identifier;
subroutineDeclar = (_constructor | _function | _method) (type | _void) identifier "(" paramList ")" subroutineBody;
paramList = type identifier {"," type identifier};
subroutineBody = "{" {statement} "}";
statement = varDeclarStatement|letStatement|ifStatement|whileStatement|doStatement|returnStatement;
varDeclarStatement = _var type identifier { "," identifier } ";";
letStatement = _let identifier [ "[" expression "]" ] "=" expression ";";
ifStatement = _if "(" expression ")" "{" {statement} "}" [_else "{" {statement} "}"];
whileStatement = _while "(" expression ")" "{" {statement} "}";
doStatement = _do subroutineCall ";";
subroutineCall = identifier [ "." identifier ] "(" expressionList ")";
expressionList = expression { "," expression };
returnStatement = _return [ expression ] ";";
expression = relationalExpression { ( "&" | "|" ) relationalExpression };
relationalExpression = arithmeticExpression { ( "=" | ">" | "<" ) arithmeticExpression };
arithmeticExpression = term { ( "+" | "-" ) term };
term = factor { ( "*" | "/" ) factor };
factor = ( "-" | "~") operand;
operand = integerConstant | identifier ["."identifier ] [ "[" expression "]" | "("expressionList ")" ] | "("expression")" | stringLiteral | _true | _false | _null | _this;
