classDeclar = "class" identifier "{" {memberDeclar} "}";
memberDeclar = classVarDeclar | subroutineDeclar;
classVarDeclar = ("static" | "field" ) type identifier {"," identifier}";";
type = "int" | "char" | "boolean" | identifier;
subroutineDeclar = ("constructor" | "function" | "method") (type | "void") identifier "(" paramList ")" subroutineBody;
paramList = type identifier {"," type identifier} | empty;
subroutineBody = "{" {statement} "}";
statement = varDeclarStatement|letStatement|ifStatement|whileStatement|doStatement|returnStatement;
varDeclarStatement = "var" type identifier { "," identifier } ";";
letStatemnt = "let" identifier [ "[" expression "]" ] "=" expression ";";
ifStatement = "if" "(" expression ")" "{" {statement} "}" ["else" "{" {statement} "}"];
whileStatement = "while" "(" expression ")" "{" {statement} "}";
doStatement = "do" subroutineCall ";";
subroutineCall = identifier [ "." identifier ] "(" expressionList ")";
expressionList = expression { "," expression } | empty;
returnStatemnt = "return" [ expression ] ";";
expression = relationalExpression { ( "&" | "|" ) relationalExpression };
relationalExpression = ArithmeticExpression { ( "=" | ">" | "<" ) ArithmeticExpression };
ArithmeticExpression = term { ( "+" | "-" ) term };
term = factor { ( "*" | "/" ) factor };
factor = ( "-" | "~" | empty ) operand;
operand = integerConstant | identifier ["."identifier ] [ "[" expression "]" | "("expressionList ")" ] | "("expression")" | stringLiteral | "true" | "false" | "null" | "this";

identifier = "placeholder";
empty = "placeholder";
integerConstant = "placeholder";
stringLiteral = "placeholder";